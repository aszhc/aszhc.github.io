<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 學而</title>
    <link>https://aszhc.github.io/post/</link>
    <description>Recent content in Posts on 學而</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 08 Jun 2021 10:59:52 +0800</lastBuildDate>
    
	<atom:link href="https://aszhc.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker 01</title>
      <link>https://aszhc.github.io/post/Docker/Docker-01/</link>
      <pubDate>Tue, 08 Jun 2021 10:59:52 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Docker/Docker-01/</guid>
      <description>Hello Docker 01 </description>
    </item>
    
    <item>
      <title>Docker 01</title>
      <link>https://aszhc.github.io/post/Docker/Docker-02/</link>
      <pubDate>Tue, 08 Jun 2021 10:59:52 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Docker/Docker-02/</guid>
      <description>Hello Docker 02 </description>
    </item>
    
    <item>
      <title>Docker 01</title>
      <link>https://aszhc.github.io/post/Docker/Docker-03/</link>
      <pubDate>Tue, 08 Jun 2021 10:59:52 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Docker/Docker-03/</guid>
      <description>Hello Docker 03 </description>
    </item>
    
    <item>
      <title>Docker知识</title>
      <link>https://aszhc.github.io/post/Docker%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Tue, 08 Jun 2021 10:59:20 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Docker%E7%9F%A5%E8%AF%86/</guid>
      <description>Hello Docker Docker-01 Docker-02 Docker-03</description>
    </item>
    
    <item>
      <title>Markdown中的emoji图标标签表</title>
      <link>https://aszhc.github.io/post/markdown%E4%B8%AD%E7%9A%84emoji%E5%9B%BE%E6%A0%87%E6%A0%87%E7%AD%BE%E8%A1%A8/</link>
      <pubDate>Sat, 08 May 2021 14:35:44 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/markdown%E4%B8%AD%E7%9A%84emoji%E5%9B%BE%E6%A0%87%E6%A0%87%E7%AD%BE%E8%A1%A8/</guid>
      <description>markdown中的emoji图标标签表 这是一篇关于markdown中快速插入Emoji表情的语法速查表，以后写markdown想要插入em</description>
    </item>
    
    <item>
      <title>Golang Struct 内存对齐</title>
      <link>https://aszhc.github.io/post/Golang-struct-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Wed, 24 Mar 2021 16:29:20 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Golang-struct-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
      <description>struct 内存对齐 如何计算结构体占用的空间 在 Go 语言中，我们可以使用 unsafe.Sizeof 计算出一个数据类型实例需要占用的字节数。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>Golang Slice原理</title>
      <link>https://aszhc.github.io/post/Golang-Slice%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 24 Mar 2021 16:27:08 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Golang-Slice%E5%8E%9F%E7%90%86/</guid>
      <description>Slice 又称动态数组，依托数组实现，可以方便的进行扩容、传递等，实际使用中比数组更灵活。 特性速览 Slice依托数组实现，底层数组对用户屏蔽，在底层</description>
    </item>
    
    <item>
      <title>Golang Map的实现原理</title>
      <link>https://aszhc.github.io/post/Golang-Map%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 24 Mar 2021 15:50:35 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Golang-Map%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</guid>
      <description>[toc] Go语言的map底层使用Hash表实现 特性速览 操作方式 1）初始化 map支持字面量初始化和map( )初始化 字面量初始化 1 2 3 4 5 6 7 8 9 func MapInitByLiteral()</description>
    </item>
    
    <item>
      <title>Golang中make与new有何区别？</title>
      <link>https://aszhc.github.io/post/Golang%E4%B8%ADmake%E4%B8%8Enew%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Thu, 04 Mar 2021 21:00:03 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Golang%E4%B8%ADmake%E4%B8%8Enew%E6%9C%89%E4%BD%95%E5%8C%BA%E5%88%AB/</guid>
      <description>Golang中make与new的区别 前言 new和make是内建的两个函数，主要用来分配类型内存 变量的声明 1 2 var i int var s string 变量的声明我们可以通</description>
    </item>
    
    <item>
      <title>哈希映射和集合练习</title>
      <link>https://aszhc.github.io/post/%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84%E5%92%8C%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0/</link>
      <pubDate>Sat, 09 May 2020 18:19:00 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84%E5%92%8C%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0/</guid>
      <description>哈希映射和集合练习 1. 有效的字母异位词 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。 示例 1: 输入: s = &amp;quot;anagram&amp;quot;, t = &amp;quot;nagaram&amp;quot; 输出: true 示例 2: 输</description>
    </item>
    
    <item>
      <title>栈和队列练习题</title>
      <link>https://aszhc.github.io/post/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Tue, 05 May 2020 17:32:15 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <description>栈和队列的练习题 1. 有效的括号 给定一个只包括 &amp;lsquo;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&amp;rsquo; 的字符串，判断字符串是否有效</description>
    </item>
    
    <item>
      <title>数组、链表练习题</title>
      <link>https://aszhc.github.io/post/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Wed, 22 Apr 2020 12:22:13 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/%E6%95%B0%E7%BB%84%E9%93%BE%E8%A1%A8%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <description>数组与链表 Array 实战题目 1. 盛最多水的容器 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution: def maxArea(self, height: List[int]) -&amp;gt; int: # 1. 双指针法， 用max_area保存最大值 left_point = 0 right_point = len(height) - 1 max_area</description>
    </item>
    
    <item>
      <title>递归</title>
      <link>https://aszhc.github.io/post/%E9%80%92%E5%BD%92/</link>
      <pubDate>Mon, 02 Mar 2020 13:02:35 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/%E9%80%92%E5%BD%92/</guid>
      <description>To iterate is human, to recurse, divine. 人理解迭代，神理解递归。 什么是递归 递归算法（英语：recursion algorithm）在计算机科学中是指一种通过重复将问题分</description>
    </item>
    
    <item>
      <title>动态规划</title>
      <link>https://aszhc.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</link>
      <pubDate>Sat, 01 Feb 2020 12:56:21 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</guid>
      <description>动态规划入门 动态规划(Dynamic programming, 简称DP), 通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。 DP常常适用于有重叠子问题和最</description>
    </item>
    
    <item>
      <title>Docker基础知识</title>
      <link>https://aszhc.github.io/post/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 03 Jun 2019 10:32:03 +0800</pubDate>
      
      <guid>https://aszhc.github.io/post/Docker%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>Docker 安装 Ubuntu 19安装 安装命令 1 2 sudo apt update sudo apt install docker.io CentOS 7安装 这里只介绍用仓库下载安装的方式。 为了方便添加软件源，支持 devicemapper 存储类型，安装如下软件包： 1 2 3</description>
    </item>
    
  </channel>
</rss>